"""
Script d'automatisation compl√®te du pipeline de donn√©es tennis
Ordre d'ex√©cution: scraper -> transform -> prediction -> app
"""

import subprocess
import sys
import time
import os
from datetime import datetime

class TennisDataPipeline:
    def __init__(self):
        self.scripts_order = [
            {
                'name': 'Scraper Tennis Explorer',
                'file': 'scraper_tennis_explorer.py',
                'description': 'Extraction des donn√©es depuis Tennis Explorer',
                'output_file': 'data/Result_data_export.xlsx'
            },
            {
                'name': 'Transform Stats',
                'file': 'transform_stats.py', 
                'description': 'Transformation et nettoyage des donn√©es',
                'output_file': 'data/Stats_tournois_en_cours.xlsx'
            },
            {
                'name': 'Simplified Prediction System',
                'file': 'simplified_prediction_system.py',
                'description': 'G√©n√©ration des pr√©dictions ML',
                'output_file': None  # Pas de fichier de sortie sp√©cifique
            },
            {
                'name': 'Flask App',
                'file': 'simple_app_updated.py',
                'description': 'Lancement de l\'application web',
                'output_file': None
            }
        ]
        
    def log_message(self, message, level="INFO"):
        """Affiche un message avec timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] [{level}] {message}")
        
    def check_file_exists(self, filepath):
        """V√©rifie si un fichier existe"""
        if filepath and os.path.exists(filepath):
            size = os.path.getsize(filepath)
            self.log_message(f"‚úÖ Fichier trouv√©: {filepath} ({size} bytes)")
            return True
        elif filepath:
            self.log_message(f"‚ùå Fichier manquant: {filepath}", "WARNING")
            return False
        return True
        
    def run_script(self, script_info, timeout=600):
        """Ex√©cute un script Python avec gestion d'erreurs"""
        script_name = script_info['name']
        script_file = script_info['file']
        
        self.log_message(f"üöÄ D√©marrage: {script_name}")
        self.log_message(f"üìÑ Fichier: {script_file}")
        self.log_message(f"üìù Description: {script_info['description']}")
        
        try:
            # V√©rifier que le fichier script existe
            if not os.path.exists(script_file):
                self.log_message(f"‚ùå Script non trouv√©: {script_file}", "ERROR")
                return False
                
            # Ex√©cuter le script
            start_time = time.time()
            result = subprocess.run(
                [sys.executable, script_file],
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=os.getcwd()
            )
            
            execution_time = time.time() - start_time
            
            if result.returncode == 0:
                self.log_message(f"‚úÖ {script_name} termin√© avec succ√®s ({execution_time:.1f}s)")
                
                # Afficher la sortie si elle existe
                if result.stdout.strip():
                    self.log_message("üì§ Sortie du script:")
                    for line in result.stdout.strip().split('\n')[-5:]:  # 5 derni√®res lignes
                        print(f"    {line}")
                
                # V√©rifier le fichier de sortie si sp√©cifi√©
                if script_info['output_file']:
                    time.sleep(2)  # Attendre que le fichier soit √©crit
                    return self.check_file_exists(script_info['output_file'])
                
                return True
                
            else:
                self.log_message(f"‚ùå {script_name} a √©chou√© (code: {result.returncode})", "ERROR")
                if result.stderr:
                    self.log_message("üì• Erreurs:")
                    for line in result.stderr.strip().split('\n')[-3:]:  # 3 derni√®res lignes d'erreur
                        print(f"    {line}")
                return False
                
        except subprocess.TimeoutExpired:
            self.log_message(f"‚è∞ {script_name} a d√©pass√© le timeout ({timeout}s)", "ERROR")
            return False
        except Exception as e:
            self.log_message(f"üí• Erreur lors de l'ex√©cution de {script_name}: {str(e)}", "ERROR")
            return False
    
    def run_pipeline(self, start_from=0, stop_before_app=False):
        """
        Ex√©cute le pipeline complet
        
        Args:
            start_from (int): Index du script √† partir duquel commencer (0=scraper, 1=transform, etc.)
            stop_before_app (bool): S'arr√™ter avant le lancement de l'app Flask
        """
        self.log_message("üéØ D√âMARRAGE DU PIPELINE DE DONN√âES TENNIS")
        self.log_message("=" * 60)
        
        # D√©terminer les scripts √† ex√©cuter
        scripts_to_run = self.scripts_order[start_from:]
        if stop_before_app:
            scripts_to_run = [s for s in scripts_to_run if s['file'] != 'simple_app_updated.py']
        
        total_scripts = len(scripts_to_run)
        successful_scripts = 0
        
        for i, script_info in enumerate(scripts_to_run, 1):
            self.log_message(f"üìä √âtape {i}/{total_scripts}")
            self.log_message("-" * 40)
            
            success = self.run_script(script_info)
            
            if success:
                successful_scripts += 1
                self.log_message(f"‚úÖ √âtape {i} r√©ussie\n")
            else:
                self.log_message(f"‚ùå √âtape {i} √©chou√©e", "ERROR")
                
                # Demander si on continue malgr√© l'erreur
                user_input = input("Continuer malgr√© l'erreur? (o/N): ").lower()
                if user_input not in ['o', 'oui', 'y', 'yes']:
                    self.log_message("üõë Pipeline interrompu par l'utilisateur", "WARNING")
                    break
                else:
                    self.log_message("‚ö†Ô∏è Continuation malgr√© l'erreur", "WARNING")
        
        # R√©sum√© final
        self.log_message("=" * 60)
        self.log_message("üìã R√âSUM√â DU PIPELINE")
        self.log_message(f"‚úÖ Scripts r√©ussis: {successful_scripts}/{total_scripts}")
        
        if successful_scripts == total_scripts:
            self.log_message("üéâ Pipeline termin√© avec succ√®s!")
            
            if not stop_before_app and any(s['file'] == 'simple_app_updated.py' for s in scripts_to_run):
                self.log_message("üåê Application web d√©marr√©e sur http://127.0.0.1:5000")
        else:
            self.log_message("‚ö†Ô∏è Pipeline termin√© avec des erreurs", "WARNING")
        
        return successful_scripts == total_scripts

def main():
    """Fonction principale avec options de lancement"""
    pipeline = TennisDataPipeline()
    
    print("üéæ PIPELINE D'AUTOMATISATION TENNIS")
    print("=" * 50)
    print("Options disponibles:")
    print("1. Pipeline complet (scraper ‚Üí transform ‚Üí prediction ‚Üí app)")
    print("2. √Ä partir de transform (transform ‚Üí prediction ‚Üí app)")
    print("3. √Ä partir de prediction (prediction ‚Üí app)")
    print("4. Pipeline sans app (scraper ‚Üí transform ‚Üí prediction)")
    print("5. Seulement l'app")
    print()
    
    try:
        choice = input("Choisissez une option (1-5): ").strip()
        
        if choice == "1":
            pipeline.run_pipeline(start_from=0)
        elif choice == "2":
            pipeline.run_pipeline(start_from=1)
        elif choice == "3":
            pipeline.run_pipeline(start_from=2)
        elif choice == "4":
            pipeline.run_pipeline(start_from=0, stop_before_app=True)
        elif choice == "5":
            pipeline.run_pipeline(start_from=3)
        else:
            print("‚ùå Option invalide")
            return
            
    except KeyboardInterrupt:
        print("\nüõë Pipeline interrompu par l'utilisateur")
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {str(e)}")

if __name__ == "__main__":
    main()
